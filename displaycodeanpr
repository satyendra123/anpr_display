from flask import Flask, request
import serial
from time import sleep

app = Flask(__name__)

ser = serial.Serial('COM1', baudrate=9600, timeout=0.1)

def send_data_to_exit_display(car_number, status):
    clear_display_message = '|C|1|6|\r\n'
    print(f"Sending clear display message for display 1: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    clear_display_message = '|C|2|6|\r\n'
    print(f"Sending clear display message for display 2: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    car_number_message = f'|C|1|4|1|1-1-#G{car_number}|\r\n'
    print(f"Sending car number message to display 1: {car_number_message}")
    ser.write(car_number_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    status_message = f'|C|2|4|1|10-0-#GRS-{status}|\r\n'
    print(f"Sending status message to display 2: {status_message}")
    ser.write(status_message.encode('ascii'))
    ser.flush()
    sleep(5)

    clear_display_message = '|C|1|6|\r\n'
    print(f"Sending clear display message for display 1: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    clear_display_message = '|C|2|6|\r\n'
    print(f"Sending clear display message for display 2: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)
    
def send_data_to_entry_display(car_number):
    clear_display_message = '|C|1|6|\r\n'
    print(f"Sending clear display message for display 1: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    clear_display_message = '|C|2|6|\r\n'
    print(f"Sending clear display message for display 2: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    car_number_message = f'|C|1|4|1|1-1-#G{car_number}|\r\n'
    print(f"Sending car number message to display 1: {car_number_message}")
    ser.write(car_number_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    clear_display_message = '|C|1|6|\r\n'
    print(f"Sending clear display message for display 1: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

    clear_display_message = '|C|2|6|\r\n'
    print(f"Sending clear display message for display 2: {clear_display_message}")
    ser.write(clear_display_message.encode('ascii'))
    ser.flush()
    sleep(0.1)

def send_welcome_message_to_display():
    welcome_message_1 = '|C|1|4|1|12-6-#GWELCOME|\r\n'
    print(f"Sending welcome message to display 1: {welcome_message_1}")
    ser.write(welcome_message_1.encode('ascii'))
    ser.flush()
    sleep(0.1)

@app.route('/exitreceivedisplay', methods=['POST'])
def exit_display():
    data = request.get_json()
    print(f"Received exit data: {data}")
    
    price = data.get('price')
    veh_no = data.get('car_number')

    if price and veh_no:
        print(f"Exit Received data - Price: {price}, Vehicle Number: {veh_no}")
        
        send_data_to_exit_display(veh_no, price)
        send_welcome_message_to_display()
        
        return 'Data received and processed successfully', 200
    else:
        return 'Missing price or car number in the received data', 400
        
@app.route('/entryreceiveddisplay',method=["POST"])
def entry_display():
    data = request.get_json()
    print(f"received entry data: {data}")
    veh_no = data.get('car_number')
    if veh_no:
        print(f"entry vehicle number is received- Vehicle Number: {veh_no}")
        send_data_to_entry_display(veh_no)
        send_welcome_message_to_display()
        return 'Data received and processed successfully',200
        
    else:
        return 'Missing vehicle Number',400

if __name__ == '__main__':
    # Run the Flask app
    app.run(host='0.0.0.0', port=8000)
